{"cells":[{"metadata":{"_kg_hide-input":false,"trusted":true},"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline\n\n\ntrainingset=pd.read_csv('../input/fake-news/train.csv')\ntestingset=pd.read_csv('../input/fake-news/test.csv')\n\n\ntrainingset.head(10)\n\n\nauthors={}\nfor i in range(trainingset.shape[0]):\n    if type(trainingset.loc[i,'author'])!=float:\n        if trainingset.loc[i,'author'] in authors:\n            if trainingset.loc[i,'label']==1:\n                authors[trainingset.loc[i,'author']]=[authors[trainingset.loc[i,'author']][0]+1,authors[trainingset.loc[i,'author']][1]+1,authors[trainingset.loc[i,'author']][2]]\n            else:\n                authors[trainingset.loc[i,'author']]=[authors[trainingset.loc[i,'author']][0]+1,authors[trainingset.loc[i,'author']][1],authors[trainingset.loc[i,'author']][2]+1]\n        else:\n            if trainingset.loc[i,'label']==1:\n                authors[trainingset.loc[i,'author']]=[1,1,0]\n            else:\n                authors[trainingset.loc[i,'author']]=[1,0,1]\n    else:\n        trainingset.loc[i,'author']=\"Unknown\"\n        \nprint(len(authors))\n\n\nprint(trainingset.shape)\ntrainingset.head(10)\n\n\ntestingset['label']='t'\n\ntestingset=testingset.fillna(' ')\ntrainingset=trainingset.fillna(' ')\ntestingset['total']=testingset['title']+' '+testingset['author']+testingset['text']\ntrainingset['total']=trainingset['title']+' '+trainingset['author']+trainingset['text']\n\ntransformer = TfidfTransformer(smooth_idf=False)\ncount_vectorizer = CountVectorizer(ngram_range=(1, 3))\ncounts = count_vectorizer.fit_transform(trainingset['total'].values)\ntfidf = transformer.fit_transform(counts)\n\n\ntargets = trainingset['label'].values\ntest_counts = count_vectorizer.transform(testingset['total'].values)\ntest_tfidf = transformer.fit_transform(test_counts)\n\nX_train, X_test, y_train, y_test = train_test_split(tfidf, targets, random_state=0)\n\n\nfrom sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression(C=1e5)\nlogreg.fit(X_train, y_train)\nprint('Accuracy of Lasso classifier on training set: {:.2f}'\n     .format(logreg.score(X_train, y_train)))\nprint('Accuracy of Lasso classifier on test set: {:.2f}'\n     .format(logreg.score(X_test, y_test)))\n\ntitle=\"Obama is egyptian.\"\nauthor=\"Smara\"\ntext=\"Obama not american citizen.\"\ntst=pd.DataFrame()\ntst.loc[0,'total']=title+' '+author+text\ntst.head()\nexample_counts = count_vectorizer.transform(tst['total'].values)\n\npredictions = logreg.predict(example_counts)\n\nif predictions[0]==1:\n    print(\"Fake\")\nelse:\n    print(\"True\")","execution_count":1,"outputs":[{"output_type":"stream","text":"4201\n(20800, 5)\n","name":"stdout"},{"output_type":"stream","text":"/opt/conda/lib/python3.6/site-packages/sklearn/feature_extraction/text.py:1278: RuntimeWarning: divide by zero encountered in true_divide\n  idf = np.log(n_samples / df) + 1\n/opt/conda/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n  FutureWarning)\n","name":"stderr"},{"output_type":"stream","text":"Accuracy of Lasso classifier on training set: 1.00\nAccuracy of Lasso classifier on test set: 0.98\nFake\n","name":"stdout"}]}],"metadata":{"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"}},"nbformat":4,"nbformat_minor":1}